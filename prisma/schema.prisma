generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SocialEvents {
  id                  Int                   @id @default(autoincrement())
  title               String                @db.VarChar(255)
  description         String
  avatar              String                @map("avatar_image") @db.VarChar(255)
  banner              String                @map("banner_image") @db.VarChar(255)
  rating              Float
  type                type                  @default(Online)
  socialEventSchedule SocialEventSchedule[]
  performer           Artists               @relation(fields: [performerId], references: [id])
  performerId         Int                   @map("performer_id")
  location            Location              @relation(fields: [locationId], references: [id])
  locationId          Int

  @@map("social_events")
}

model Artists {
  id           Int            @id @default(autoincrement())
  firstName    String         @map("first_name") @db.VarChar(255)
  lastName     String         @map("last_name") @db.VarChar(255)
  email        String         @unique @db.VarChar(255)
  age          Int
  SocialEvents SocialEvents[]

  @@map("artists")
}

model Schedules {
  id                  Int                   @id @default(autoincrement())
  datetime            DateTime
  socialEventSchedule SocialEventSchedule[]

  @@map("schedules")
}

model SocialEventSchedule {
  id            Int          @id @default(autoincrement())
  socialEvent   SocialEvents @relation(fields: [socialEventId], references: [id])
  schedule      Schedules    @relation(fields: [scheduleId], references: [id])
  socialEventId Int          @map("social_event_id")
  scheduleId    Int          @map("schedule_id")
  remaining     Int
  enabled       Boolean      @default(true)
  price         Int
  orders        Orders[]

  @@map("social_event_schedule")
}

model Orders {
  id                    Int                 @id @default(autoincrement())
  user                  Users               @relation(fields: [userId], references: [id])
  userId                Int                 @map("user_id")
  socialEventSchedule   SocialEventSchedule @relation(fields: [socialEventScheduleId], references: [id])
  socialEventScheduleId Int                 @map("social_event_schedule_id")
  quantity              Int
  price                 Float
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt @map("updated_at")

  @@map("orders")
}

model Users {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(255)
  age       Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Orders[]

  @@map("users")
}

model Day {
  id             Int              @id @default(autoincrement())
  index          Int
  available      Boolean          @default(false)
  AttentionHours AttentionHours[]

  @@map("day")
}

model Hour {
  id             Int              @id @default(autoincrement())
  from           Int
  to             Int
  AttentionHours AttentionHours[]

  @@map("hour")
}

model AttentionHours {
  id         Int      @id @default(autoincrement())
  dayId      Int
  day        Day      @relation(fields: [dayId], references: [id])
  hourId     Int
  hour       Hour     @relation(fields: [hourId], references: [id])
  locationId Int      @map("location_id")
  location   Location @relation(fields: [locationId], references: [id])

  @@map("attention_hours")
}

model Location {
  id             Int              @id @default(autoincrement())
  addressId      Int              @map("address_id")
  name           String           @db.VarChar(255)
  address        Address          @relation(fields: [addressId], references: [id])
  capacityId     Int              @map("capacity_id")
  capacity       Capacity         @relation(fields: [capacityId], references: [id])
  attentionHours AttentionHours[]

  SocialEvents SocialEvents[]
  @@map("location")
}

model Capacity {
  id          Int        @id @default(autoincrement())
  total       Int
  minQuantity Int?       @map("min_quantity")
  maxQuantity Int?       @map("max_quantity")
  Location    Location[]

  @@map("capacity")
}

model Address {
  id        Int    @id @default(autoincrement())
  formatted String @map("Formatted") @db.VarChar(255)
  city      String @map("City") @db.VarChar(120)
  state     String @map("State") @db.Char(2)
  country   String @map("Country") @db.Char(2)

  Location Location[]
  @@map("address")
}

enum type {
  Online
  Offline
  Music
  Sport
  E_sports  @map("E-sports")
  Festival
}
